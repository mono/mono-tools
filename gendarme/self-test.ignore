# ---------------------------------------------------------
# TODO: These should be fixed.

R: Gendarme.Rules.Correctness.EnsureLocalDisposalRule
M: System.Void Gendarme.Wizard::SaveReportButtonClick(System.Object,System.EventArgs)

# Not sure about this one.
R: Gendarme.Rules.Design.Generic.PreferGenericsOverRefObjectRule
M: Mono.Cecil.Cil.Instruction Gendarme.Framework.Helpers.StackEntryAnalysis::GetNextInstruction(Mono.Cecil.Cil.Instruction,System.Object&)

R: Gendarme.Rules.Exceptions.UseObjectDisposedExceptionRule
M: System.Void Gendarme.Wizard::set_Current(Gendarme.Page)

R: Gendarme.Rules.Correctness.CheckParametersNullityInVisibleMethodsRule
# cannot be null - waiting for code contracts
M: System.Void Gendarme.ConsoleRunner::OnAssembly(Gendarme.Framework.RunnerEventArgs)
M: System.Void Gendarme.Framework.Runner::TearDown(Gendarme.Framework.IRule)
M: System.Void Gendarme.Rules.Concurrency.DecorateThreadsRule::OnAssembly(System.Object,Gendarme.Framework.RunnerEventArgs)
M: System.Void Gendarme.Rules.Concurrency.DoNotLockOnWeakIdentityObjectsRule::Analyze(Mono.Cecil.MethodDefinition,Mono.Cecil.MethodReference,Mono.Cecil.Cil.Instruction)
# all > 200 rules expose a Check* method that does not check for null (by contract) but we need code contracts to show this
M: Gendarme.Framework.RuleResult Gendarme.Rules.BadPractice.AvoidAssemblyVersionMismatchRule::CheckAssembly(Mono.Cecil.AssemblyDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.BadPractice.AvoidCallingProblematicMethodsRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.BadPractice.AvoidVisibleConstantFieldRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.BadPractice.CheckNewExceptionWithoutThrowingRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.BadPractice.CheckNewThreadWithoutStartRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.BadPractice.CloneMethodShouldNotReturnNullRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.BadPractice.ConstructorShouldNotCallVirtualMethodsRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.BadPractice.DisableDebuggingCodeRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.BadPractice.DoNotForgetNotImplementedMethodsRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.BadPractice.DoNotUseEnumIsAssignableFromRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.BadPractice.DoNotUseGetInterfaceToCheckAssignabilityRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.BadPractice.GetEntryAssemblyMayReturnNullRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.BadPractice.OnlyUseDisposeForIDisposableTypesRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.BadPractice.PreferEmptyInstanceOverNullRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.BadPractice.PreferParamsArrayForVariableArgumentsRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.BadPractice.PreferTryParseRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.BadPractice.PreferSafeHandleRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.BadPractice.ReplaceIncompleteOddnessCheckRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Concurrency.DecorateThreadsRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Concurrency.DoNotUseMethodImplOptionsSynchronizedRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Concurrency.DoNotUseThreadStaticWithInstanceFieldsRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Concurrency.DoNotUseLockedRegionOutsideMethodRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Concurrency.DoubleCheckLockingRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Concurrency.LockAnalyzerRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Concurrency.NonConstantStaticFieldsShouldNotBeVisibleRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Concurrency.ProtectCallToEventDelegatesRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Concurrency.ReviewLockUsedOnlyForOperationsOnVariablesRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Concurrency.WriteStaticFieldFromInstanceMethodRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Correctness.AvoidCodeWithSideEffectsInConditionalCodeRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Correctness.AvoidConstructorsInStaticTypesRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Correctness.AvoidMethodsWithSideEffectsInConditionalCodeRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Correctness.DoNotRecurseInEqualityRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Correctness.BadRecursiveInvocationRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Correctness.CallingEqualsWithNullArgRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Correctness.CheckParametersNullityInVisibleMethodsRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Correctness.DisposableFieldsShouldBeDisposedRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Correctness.DoNotRoundIntegersRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Correctness.EnsureLocalDisposalRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Correctness.FinalizersShouldCallBaseClassFinalizerRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Correctness.ReviewInconsistentIdentityRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Correctness.MethodCanBeMadeStaticRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Correctness.ProvideCorrectArgumentsToFormattingMethodsRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Correctness.ProvideCorrectRegexPatternRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Correctness.ProvideValidXmlStringRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Correctness.ProvideValidXPathExpressionRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Correctness.ReviewCastOnIntegerDivisionRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Correctness.ReviewCastOnIntegerMultiplicationRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Correctness.ReviewDoubleAssignmentRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Correctness.ReviewSelfAssignmentRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Correctness.ReviewUselessControlFlowRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Correctness.ReviewUseOfInt64BitsToDoubleRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Correctness.ReviewUseOfModuloOneOnIntegersRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Correctness.UseNoInliningWithGetCallingAssemblyRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Correctness.UseValueInPropertySetterRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.AbstractTypesShouldNotHavePublicConstructorsRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.AvoidEmptyInterfaceRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.AvoidMultidimensionalIndexerRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.AvoidPropertiesWithoutGetAccessorRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.AvoidVisibleFieldsRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.AvoidRefAndOutParametersRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.AvoidSmallNamespaceRule::CheckAssembly(Mono.Cecil.AssemblyDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.AvoidVisibleNestedTypesRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.ConsiderAddingInterfaceRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.ConsiderConvertingFieldToNullableRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.ConsiderConvertingMethodToPropertyRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.ConsiderUsingStaticTypeRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.DeclareEventHandlersCorrectlyRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.DisposableTypesShouldHaveFinalizerRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.DoNotDeclareVirtualMethodsInSealedTypeRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.DoNotDeclareProtectedMembersInSealedTypeRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.EnsureSymmetryForOverloadedOperatorsRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.EnumsShouldDefineAZeroValueRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.EnumsShouldUseInt32Rule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.ImplementEqualsAndGetHashCodeInPairRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.ImplementIComparableCorrectlyRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.MainShouldNotBePublicRule::CheckAssembly(Mono.Cecil.AssemblyDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.MarkAssemblyWithAssemblyVersionRule::CheckAssembly(Mono.Cecil.AssemblyDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.MarkAssemblyWithAttributeRule::CheckAssembly(Mono.Cecil.AssemblyDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.OperatorEqualsShouldBeOverloadedRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.OverrideEqualsMethodRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.PreferEventsOverMethodsRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.PreferIntegerOrStringForIndexersRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.ProvideAlternativeNamesForOperatorOverloadsRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.ProvideTryParseAlternativeRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.TypesShouldBeInsideNamespacesRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.TypesWithDisposableFieldsShouldBeDisposableRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.TypesWithNativeFieldsShouldBeDisposableRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.UseFlagsAttributeRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.UseCorrectDisposeSignaturesRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.Generic.AvoidMethodWithUnusedGenericTypeRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.Generic.ImplementGenericCollectionInterfacesRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.Generic.PreferGenericsOverRefObjectRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Exceptions.AvoidArgumentExceptionDefaultConstructorRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Exceptions.DoNotDestroyStackTraceRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Exceptions.DoNotThrowInUnexpectedLocationRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Exceptions.DoNotSwallowErrorsCatchingNonSpecificExceptionsRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Exceptions.ExceptionShouldBeVisibleRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Exceptions.InstantiateArgumentExceptionCorrectlyRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Exceptions.NewExceptionsRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Exceptions.UseObjectDisposedExceptionRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Interoperability.CentralizePInvokesIntoNativeMethodsTypeRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Interoperability.CentralizePInvokesIntoNativeMethodsTypeRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Interoperability.DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Interoperability.DoNotAssumeIntPtrSizeRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Interoperability.GetLastErrorMustBeCalledRightAfterPInvokeRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Interoperability.MarshalBooleansInPInvokeDeclarationsRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Interoperability.MarshalStringsInPInvokeDeclarationsRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Interoperability.PInvokeShouldNotBeVisibleRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Interoperability.UseManagedAlternativesToPInvokeRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Interoperability.Com.AvoidNonPublicFieldsInComVisibleValueTypesRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Maintainability.AvoidAlwaysNullFieldRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Maintainability.AvoidComplexMethodsRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Maintainability.AvoidDeepInheritanceTreeRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Maintainability.AvoidLackOfCohesionOfMethodsRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Maintainability.AvoidUnnecessarySpecializationRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Maintainability.ConsiderUsingStopwatchRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Maintainability.PreferStringIsNullOrEmptyRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Naming.AvoidRedundancyInMethodNameRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Naming.AvoidRedundancyInTypeNameRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Naming.AvoidTypeInterfaceInconsistencyRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Naming.AvoidNonAlphanumericIdentifierRule::CheckAssembly(Mono.Cecil.AssemblyDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Naming.AvoidNonAlphanumericIdentifierRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Naming.DoNotPrefixEventsWithAfterOrBeforeRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Naming.DoNotPrefixValuesWithEnumNameRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Naming.DoNotUseReservedInEnumValueNamesRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Naming.ParameterNamesShouldMatchOverriddenMethodRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Naming.UseCorrectCasingRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Naming.UsePreferredTermsRule::CheckAssembly(Mono.Cecil.AssemblyDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Naming.UsePreferredTermsRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Naming.UsePreferredTermsRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Naming.UseSingularNameInEnumsUnlessAreFlagsRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Performance.AvoidConcatenatingCharsRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Performance.AvoidLargeNumberOfLocalVariablesRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Performance.AvoidLargeStructureRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Performance.AvoidLocalDataStoreSlotRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Performance.AvoidMethodWithLargeMaximumStackSize::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Performance.AvoidRepetitiveCallsToPropertiesRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Performance.AvoidRepetitiveCastsRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Performance.AvoidReturningArraysOnPropertiesRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Performance.AvoidTypeGetTypeForConstantStringsRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Performance.AvoidUnneededCallsOnStringRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Performance.AvoidUnneededFieldInitializationRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Performance.AvoidUnneededUnboxingRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Performance.AvoidUnsealedUninheritedInternalTypeRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Performance.AvoidUnusedParametersRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Performance.AvoidUnusedPrivateFieldsRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Performance.CompareWithEmptyStringEfficientlyRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Performance.ConsiderCustomAccessorsForNonVisibleEventsRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Performance.DoNotIgnoreMethodResultRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Performance.UseSuppressFinalizeOnIDisposableTypeWithFinalizerRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Performance.ImplementEqualsTypeRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Performance.MathMinMaxCandidateRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Performance.OverrideValueTypeDefaultsRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Performance.PreferCharOverloadRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Performance.PreferLiteralOverInitOnlyFieldsRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Performance.RemoveUnusedLocalVariablesRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Performance.ReviewLinqMethodRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Performance.UseIsOperatorRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Performance.UseStringEmptyRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Performance.UseTypeEmptyTypesRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Portability.DoNotHardcodePathsRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Portability.ExitCodeIsLimitedOnUnixRule::CheckAssembly(Mono.Cecil.AssemblyDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Portability.ExitCodeIsLimitedOnUnixRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Portability.FeatureRequiresRootPrivilegeOnUnixRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Portability.MonoCompatibilityReviewRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Portability.NewLineLiteralRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Security.ArrayFieldsShouldNotBeReadOnlyRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Security.DoNotShortCircuitCertificateCheckRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Security.NativeFieldsShouldNotBeVisibleRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Security.StaticConstructorsShouldBePrivateRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Security.Cas.AddMissingTypeInheritanceDemandRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Security.Cas.DoNotExposeFieldsInSecuredTypeRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Security.Cas.DoNotExposeMethodsProtectedByLinkDemandRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Security.Cas.ReviewNonVirtualMethodWithInheritanceDemandRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Security.Cas.ReviewSealedTypeWithInheritanceDemandRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Security.Cas.ReviewSuppressUnmanagedCodeSecurityUsageRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Serialization.DeserializeOptionalFieldRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Serialization.ImplementISerializableCorrectlyRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Serialization.MarkAllNonSerializableFieldsRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Serialization.MarkEnumerationsAsSerializableRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Serialization.MissingSerializableAttributeOnISerializableTypeRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Serialization.MissingSerializationConstructorRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Serialization.UseCorrectSignatureForSerializationMethodsRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Smells.AvoidCodeDuplicatedInSameClassRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Smells.AvoidCodeDuplicatedInSiblingClassesRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Smells.AvoidLargeClassesRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Smells.AvoidLongMethodsRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Smells.AvoidMessageChainsRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Smells.AvoidSpeculativeGeneralityRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Smells.AvoidSwitchStatementsRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.UI.ExecutableTargetRule::CheckAssembly(Mono.Cecil.AssemblyDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.UI.UseSTAThreadAttributeOnSWFEntryPointsRule::CheckAssembly(Mono.Cecil.AssemblyDefinition)

# temp entries (new rule) most need to be fixed but some occurs on different code paths
R: Gendarme.Rules.Performance.AvoidRepetitiveCallsToPropertiesRule
M: System.Int32 Gendarme.Settings::LoadRulesFromAssembly(System.String,System.String,System.String,System.String)
M: System.Boolean Gendarme.Framework.Rocks.MethodRocks::IsOverride(Mono.Cecil.MethodReference)
M: System.Void Gendarme.Rules.Concurrency.DecorateThreadsRule::CheckMethodBody(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.ThreadModel Gendarme.Rules.Concurrency.ThreadRocks::ThreadingModel(Mono.Cecil.MethodDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Correctness.DisposableFieldsShouldBeDisposedRule::CheckType(Mono.Cecil.TypeDefinition)
M: System.Void Gendarme.Rules.Correctness.ReviewInconsistentIdentityRule::ProcessMethod(Mono.Cecil.TypeDefinition,Gendarme.Rules.Correctness.ReviewInconsistentIdentityRule/MethodInfo)
M: System.Void Gendarme.Rules.Correctness.ReviewInconsistentIdentityRule::CheckHashMethod()
M: System.Void Gendarme.Rules.Correctness.ReviewInconsistentIdentityRule::CheckCloneMethod()
M: System.Void Gendarme.Rules.Correctness.ProvideCorrectArgumentsToFormattingMethodsRule::CheckCallToFormatter(Mono.Cecil.Cil.Instruction,Mono.Cecil.MethodDefinition)
M: System.Void Gendarme.Rules.Correctness.ProvideValidXmlStringRule::CheckCall(Mono.Cecil.Cil.Instruction,Mono.Cecil.MethodReference)
M: System.Void Gendarme.Rules.Correctness.ProvideValidXPathExpressionRule::CheckCall(Mono.Cecil.Cil.Instruction,Mono.Cecil.MethodReference)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.DisposableTypesShouldHaveFinalizerRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Design.Generic.DoNotExposeNestedGenericSignaturesRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: System.String Gendarme.Rules.Exceptions.DoNotThrowInUnexpectedLocationRule::ExplainThrow(Mono.Cecil.Cil.Instruction)
M: System.Boolean Gendarme.Rules.Exceptions.MissingExceptionConstructorsRule::CheckForInnerExceptionConstructor(Mono.Cecil.IMethodSignature)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Exceptions.MissingExceptionConstructorsRule::CheckType(Mono.Cecil.TypeDefinition)
M: System.Boolean Gendarme.Rules.Interoperability.GetLastErrorMustBeCalledRightAfterPInvokeRule::CheckPInvoke(Mono.Cecil.Cil.Instruction)
M: Mono.Cecil.TypeDefinition Gendarme.Rules.Maintainability.AvoidUnnecessarySpecializationRule::GetInterfaceImplementor(Mono.Cecil.TypeDefinition,System.Collections.Generic.IEnumerable`1<Gendarme.Framework.Helpers.MethodSignature>)
M: System.Boolean Gendarme.Rules.Maintainability.AvoidUnnecessarySpecializationRule::IsSystemObjectMethod(Mono.Cecil.MethodReference)
M: System.Void Gendarme.Rules.Maintainability.AvoidUnnecessarySpecializationRule::UpdateParameterLeastType(Mono.Cecil.ParameterReference,System.Collections.Generic.IEnumerable`1<Gendarme.Framework.Helpers.StackEntryUsageResult>)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Performance.CompareWithEmptyStringEfficientlyRule::CheckMethod(Mono.Cecil.MethodDefinition)
M: System.Boolean Gendarme.Rules.Performance.DoNotIgnoreMethodResultRule::IsCallException(Mono.Cecil.MethodReference)
M: System.String Gendarme.Rules.Performance.MathMinMaxCandidateRule::GetPrevious(Mono.Cecil.MethodDefinition,Mono.Cecil.Cil.Instruction&)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Serialization.DeserializeOptionalFieldRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Serialization.ImplementISerializableCorrectlyRule::CheckType(Mono.Cecil.TypeDefinition)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Serialization.MarkAllNonSerializableFieldsRule::CheckType(Mono.Cecil.TypeDefinition)
M: System.Void Gendarme.Wizard::Open(System.String)
M: System.Void Gendarme.Wizard::UpdateAssemblies()
M: System.Void Gendarme.Wizard::PrepareAnalyze()
M: System.Void Gendarme.Wizard::Analyze()
M: System.Void Gendarme.Wizard::UpdateReportUI()
M: Gendarme.ResultWriter Gendarme.Wizard::GetSelectedWriter(System.Int32,System.String)
# CSC only - System.Int32 System.Collections.CollectionBase::get_Count() > 20 (22) but MS.NET use an higher limit to inline...
M: System.Boolean Gendarme.Rules.Naming.ParameterNamesShouldMatchOverriddenMethodRule::SignatureMatches(Mono.Cecil.MethodReference,Mono.Cecil.MethodReference,System.Boolean)

# ---------------------------------------------------------
# We might want to fix these.

# in some cases a null and String.Empty means different things (e.g. absense versus empty)
R: Gendarme.Rules.BadPractice.PreferEmptyInstanceOverNullRule
M: System.String Gendarme.Rules.Correctness.AvoidMethodsWithSideEffectsInConditionalCodeRule::ConditionalOn(Mono.Cecil.MethodReference)
M: System.String Gendarme.Rules.Maintainability.AvoidUnnecessarySpecializationRule::GetReturnTypeSignature(Mono.Cecil.MethodReference)
T: Gendarme.Rules.Correctness.ProvideCorrectArgumentsToFormattingMethodsRule

# some needs fixing - to be reviewed
R: Gendarme.Rules.Smells.AvoidCodeDuplicatedInSameClassRule
# StartsHandlerRegion(Mono.Cecil.Cil.Instruction) vs StartsTryRegion(Mono.Cecil.Cil.Instruction)
# EndsTryRegion(Mono.Cecil.Cil.Instruction) vs EndsHandlerRegion(Mono.Cecil.Cil.Instruction)
T: Gendarme.Framework.Helpers.MethodPrinter
# Matches(Mono.Cecil.MethodReference) vs ToString()
T: Gendarme.Framework.Helpers.MethodSignature
# GetOperand(Mono.Cecil.Cil.Instruction,Mono.Cecil.MethodDefinition) vs GetOperandType(Mono.Cecil.Cil.Instruction,Mono.Cecil.MethodDefinition)
# GetOperandType(Mono.Cecil.Cil.Instruction,Mono.Cecil.MethodDefinition) vs GetParameter(Mono.Cecil.Cil.Instruction,Mono.Cecil.MethodDefinition)
T: Gendarme.Framework.Rocks.InstructionRocks
# Implements(Mono.Cecil.TypeReference,System.String) vs Inherits(Mono.Cecil.TypeReference,System.String)
T: Gendarme.Framework.Rocks.TypeRocks
# OnType(Gendarme.Framework.RunnerEventArgs) vs OnMethod(Gendarme.Framework.RunnerEventArgs)
T: Gendarme.Framework.Runner
# GetArgumentType(Mono.Cecil.Cil.Instruction,Mono.Cecil.MethodDefinition) vs CheckMethod(Mono.Cecil.MethodDefinition)
T: Gendarme.Rules.Correctness.DoNotRoundIntegersRule
# GetPrevious(Mono.Cecil.MethodDefinition,Mono.Cecil.Cil.Instruction&) vs IsOk(Mono.Cecil.Cil.Instruction)
T: Gendarme.Rules.Performance.MathMinMaxCandidateRule
# LoadElementMatch(Mono.Cecil.MethodDefinition,Mono.Cecil.Cil.Instruction,Mono.Cecil.Cil.Instruction) vs LoadIndirectMatch(Mono.Cecil.MethodDefinition,Mono.Cecil.Cil.Instruction,Mono.Cecil.Cil.Instruction)
T: Gendarme.Rules.Performance.AvoidRepetitiveCastsRule
# CheckAssembly(Mono.Cecil.AssemblyDefinition) vs CheckMethod(Mono.Cecil.MethodDefinition)
T: Gendarme.Rules.Portability.ExitCodeIsLimitedOnUnixRule
# GetSignatures and UpdateParameterLeastType - similar loop/switch/case but cannot be merged
T: Gendarme.Rules.Maintainability.AvoidUnnecessarySpecializationRule
# CheckAssemblyForMethodUsage and GetCache - not clear, needs review
T: Gendarme.Rules.Performance.AvoidUncalledPrivateCodeRule
# CheckForAny and CheckMethod
T: Gendarme.Rules.Performance.ReviewLinqMethodRule
# CSC only - AddImpl and GetArgumentName
T: NDesk.Options.OptionSet

R: Gendarme.Rules.Smells.AvoidSpeculativeGeneralityRule
T: Gendarme.Framework.EngineController
T: Gendarme.Framework.Helpers.MethodSignatures

# FIXME - note: some seems to be related to an xMCS bug
R: Gendarme.Rules.Performance.AvoidMethodWithLargeMaximumStackSize
# Found 1110 maximum stack size (maximum 100). ### autogenerated - should be ignored
M: System.Void Gendarme.Wizard::InitializeComponent()
# Found 129 maximum stack size (maximum 100).
M: System.Collections.Generic.List`1<Gendarme.Framework.Helpers.StackEntryAnalysis/InstructionWithLeave> Gendarme.Framework.Helpers.StackEntryAnalysis::FindLoad(Gendarme.Framework.Helpers.StackEntryAnalysis/InstructionWithLeave,Gendarme.Framework.Helpers.StackEntryAnalysis/StoreSlot)
# Found 202 maximum stack size (maximum 100).
M: System.Void Gendarme.Rules.Concurrency.DecorateThreadsRule::CheckMethodBody(Mono.Cecil.MethodDefinition)
# Found 121 maximum stack size (maximum 100).
M: System.Void Gendarme.Rules.Correctness.ReviewInconsistentIdentityRule::ProcessMethod(Mono.Cecil.TypeDefinition,Gendarme.Rules.Correctness.ReviewInconsistentIdentityRule/MethodInfo)
# Found 188 maximum stack size (maximum 100).
M: Gendarme.Framework.RuleResult Gendarme.Rules.Interoperability.DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule::CheckMethod(Mono.Cecil.MethodDefinition)
# Found 103 maximum stack size (maximum 100). when compiled with CSC maxstack is 5 !!!
M: Gendarme.Framework.RuleResult Gendarme.Rules.Maintainability.AvoidAlwaysNullFieldRule::CheckType(Mono.Cecil.TypeDefinition)

# FIXME
R: Gendarme.Rules.Maintainability.AvoidComplexMethodsRule
# CC 32
M: System.Void Gendarme.Framework.Helpers.MethodSignatures::.cctor()
# CC 29
M: System.Collections.Generic.List`1<Gendarme.Framework.Helpers.StackEntryAnalysis/InstructionWithLeave> Gendarme.Framework.Helpers.StackEntryAnalysis::FindLoad(Gendarme.Framework.Helpers.StackEntryAnalysis/InstructionWithLeave,Gendarme.Framework.Helpers.StackEntryAnalysis/StoreSlot)
# CC 43
M: System.Void Gendarme.Rules.Concurrency.DecorateThreadsRule::CheckMethodBody(Mono.Cecil.MethodDefinition)
# CC 31
M: Gendarme.Framework.RuleResult Gendarme.Rules.Interoperability.DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule::CheckMethod(Mono.Cecil.MethodDefinition)
# CC 25 (CSC only)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Concurrency.DecorateThreadsRule::CheckMethod(Mono.Cecil.MethodDefinition)

# FIXME
R: Gendarme.Rules.Smells.AvoidLongMethodsRule
# Logical SLOC: 50. Maximum : 40
M: System.Collections.Generic.List`1<Gendarme.Framework.Helpers.StackEntryAnalysis/InstructionWithLeave> Gendarme.Framework.Helpers.StackEntryAnalysis::FindLoad(Gendarme.Framework.Helpers.StackEntryAnalysis/InstructionWithLeave,Gendarme.Framework.Helpers.StackEntryAnalysis/StoreSlot)
# Logical SLOC: 64. Maximum : 40
M: System.Void Gendarme.Rules.Concurrency.DecorateThreadsRule::CheckMethodBody(Mono.Cecil.MethodDefinition)
# Logical SLOC: 62. Maximum : 40
M: Gendarme.Framework.RuleResult Gendarme.Rules.Interoperability.DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule::CheckMethod(Mono.Cecil.MethodDefinition)

# some fixes possible, needs to be reviewed
R: Gendarme.Rules.Maintainability.AvoidLackOfCohesionOfMethodsRule
T: Gendarme.ConsoleRunner
T: Gendarme.Settings
T: Gendarme.Framework.Helpers.MethodPrinter
T: Gendarme.Framework.Helpers.MethodSignature
T: Gendarme.Framework.Defect
T: Gendarme.Framework.EngineController
T: Gendarme.Rules.Concurrency.DecorateThreadsRule
T: Gendarme.Rules.Correctness.ReviewInconsistentIdentityRule
T: Gendarme.Rules.Correctness.ReviewInconsistentIdentityRule/MethodInfo
T: Gendarme.Rules.Interoperability.DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule
T: Gendarme.Rules.Interoperability.UseManagedAlternativesToPInvokeRule/ManagedAlternatives
T: Gendarme.Rules.Maintainability.AvoidComplexMethodsRule
T: Gendarme.Rules.Maintainability.AvoidLackOfCohesionOfMethodsRule
T: Gendarme.Rules.Portability.MonoCompatibilityReviewRule
T: Gendarme.Rules.Smells.AvoidLongMethodsRule
T: Gendarme.Rules.Smells.CodeDuplicatedLocator
T: Gendarme.Rules.Smells.Pattern
T: Gendarme.GuiRunner
T: Gendarme.Wizard

# BUG - suggestion won't compile - two different, incompatible interfaces are used IMethodSignature and IMetadataTokenProvider
# rule suggest the first one (same depth) but since it cannot be casted it should propose a base class
R: Gendarme.Rules.Maintainability.AvoidUnnecessarySpecializationRule
M: System.Void Gendarme.Rules.Smells.AvoidLongParameterListsRule::CheckConstructor(Mono.Cecil.MethodDefinition)
M: System.Void Gendarme.Rules.Smells.AvoidLongParameterListsRule::CheckMethod(Mono.Cecil.MethodDefinition)

# ---------------------------------------------------------
# These are all OK.

# OK - The rule itself needs the literal new line characters to test against them
R: Gendarme.Rules.Portability.NewLineLiteralRule
M: Gendarme.Framework.RuleResult Gendarme.Rules.Portability.NewLineLiteralRule::CheckMethod(Mono.Cecil.MethodDefinition)

# OK - don't apply the rule to itself
R: Gendarme.Rules.Portability.DoNotHardcodePathsRule
M: System.Void Gendarme.Rules.Portability.DoNotHardcodePathsRule::ProcessUnixProbablyAbsolutePath(System.String)

# OK - in those case the specialization has its contextual sense and helps readability
R: Gendarme.Rules.Maintainability.AvoidUnnecessarySpecializationRule
M: System.Boolean Gendarme.Framework.Rocks.ModuleRocks::HasDebuggingInformation(Mono.Cecil.ModuleDefinition)
M: System.Void Gendarme.Framework.Defect::.ctor(Gendarme.Framework.IRule,Mono.Cecil.IMetadataTokenProvider,Mono.Cecil.MethodDefinition,Mono.Cecil.Cil.Instruction,Gendarme.Framework.Severity,Gendarme.Framework.Confidence,System.String)
# only applies to parameters, so using 'Mono.Cecil.ICustomAttributeProvider' would only be confusing (e.g. code completion)
M: System.Boolean Gendarme.Framework.Rocks.ParameterRocks::IsParams(Mono.Cecil.ParameterDefinition)
# the bitmask applies only to methods, so using 'Mono.Cecil.IAnnotationProvider' would only be confusing (e.g. code completion)
M: Gendarme.Framework.Helpers.OpCodeBitmask Gendarme.Framework.Engines.OpCodeEngine::GetBitmask(Mono.Cecil.MethodDefinition)
# the check is done on methods, so using 'Mono.Cecil.IMemberReference' would only be confusing (e.g. code completion)
M: System.Boolean Gendarme.Framework.Rocks.MethodRocks::IsEntryPoint(Mono.Cecil.MethodReference)

# OK - the gendarme framework is not a beginner, nor easy, API
R: Gendarme.Rules.Design.AvoidRefAndOutParametersRule
M: Mono.Cecil.Cil.Instruction Gendarme.Framework.Helpers.StackEntryAnalysis::GetNextInstruction(Mono.Cecil.Cil.Instruction,System.Object&)

# OK - the field is not owned by this type
R: Gendarme.Rules.Design.TypesWithDisposableFieldsShouldBeDisposableRule
T: Gendarme.GuiRunner

# OK - the framework and the runners each have a global catch all to report errors
R: Gendarme.Rules.Exceptions.DoNotSwallowErrorsCatchingNonSpecificExceptionsRule
M: System.Byte Gendarme.ConsoleRunner::Execute(System.String[])
M: System.Void Gendarme.Framework.Runner::Initialize()
M: System.Void Gendarme.GuiRunner::Execute()
# OK - DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule might throw exceptions with very uncommon code sequences (obfuscated code for instance)
M: Gendarme.Framework.RuleResult Gendarme.Rules.Interoperability.DelegatesPassedToNativeCodeMustIncludeExceptionHandlingRule::CheckMethod(Mono.Cecil.MethodDefinition)
# FIXME the last one needs validation
M: System.Boolean Gendarme.Wizard::CouldCopyReport(System.String&,System.String)

# OK - Version and Guid sadly do not provide a TryParse method (at least they did not before FX4.0 - FIXME once we update)
R: Gendarme.Rules.Performance.DoNotIgnoreMethodResultRule
M: System.Boolean Gendarme.Rules.Correctness.AttributeStringLiteralsShouldParseCorrectlyRule::TryParseVersion(System.String)
M: System.Boolean Gendarme.Rules.Correctness.AttributeStringLiteralsShouldParseCorrectlyRule::TryParseGuid(System.String)

# OK - MethodSignatures use the CLR names for operators that starts with "op_"
R: Gendarme.Rules.Naming.AvoidNonAlphanumericIdentifierRule
T: Gendarme.Framework.Helpers.MethodSignatures

# OK - IMethodRule is not declared on purpose on BadPractice.ReturnNullRule
R: Gendarme.Rules.Design.ConsiderAddingInterfaceRule
T: Gendarme.Rules.BadPractice.ReturnNullRule

# OK - RegEx sadly do not provide a TryPattern method
R: Gendarme.Rules.Performance.DoNotIgnoreMethodResultRule
M: System.Boolean Gendarme.Rules.Correctness.ProvideCorrectRegexPatternRule::CheckPattern(Mono.Cecil.MethodDefinition,Mono.Cecil.Cil.Instruction,System.String,Gendarme.Framework.Confidence)

# OK - The set of potential exceptions of RegEx is unknown
R: Gendarme.Rules.Exceptions.DoNotSwallowErrorsCatchingNonSpecificExceptionsRule
M: System.Boolean Gendarme.Rules.Correctness.ProvideCorrectRegexPatternRule::CheckPattern(Mono.Cecil.MethodDefinition,Mono.Cecil.Cil.Instruction,System.String,Gendarme.Framework.Confidence)

# OK - we're using switch extensively and in a way that would be hard to OO-ize while keeping performance and readability
R: Gendarme.Rules.Smells.AvoidSwitchStatementsRule
A: *

# OK - small, but slowly growing, namespace
R: Gendarme.Rules.Design.AvoidSmallNamespaceRule
N: Gendarme.Framework.Engines

# non-gendarme code / NDesk.Options
R: Gendarme.Rules.Performance.AvoidConcatenatingCharsRule
M: System.Boolean NDesk.Options.OptionSet::ParseBundledValue(System.String,System.String,NDesk.Options.OptionContext)
M: System.String NDesk.Options.OptionSet::GetArgumentName(System.Int32,System.Int32,System.String)
R: Gendarme.Rules.Design.Generic.AvoidDeclaringCustomDelegatesRule
T: NDesk.Options.OptionAction`2
R: Gendarme.Rules.Design.AvoidRefAndOutParametersRule
M: System.Boolean NDesk.Options.OptionSet::GetOptionParts(System.String,System.String&,System.String&,System.String&,System.String&)
R: Gendarme.Rules.Performance.AvoidRepetitiveCallsToPropertiesRule
M: System.Boolean NDesk.Options.OptionSet::GetOptionParts(System.String,System.String&,System.String&,System.String&,System.String&)
R: Gendarme.Rules.Performance.AvoidReturningArraysOnPropertiesRule
M: System.String[] NDesk.Options.Option::get_Names()
M: System.String[] NDesk.Options.Option::get_ValueSeparators()
R: Gendarme.Rules.Exceptions.DoNotSwallowErrorsCatchingNonSpecificExceptionsRule
M: T NDesk.Options.Option::Parse(System.String,NDesk.Options.OptionContext)
R: Gendarme.Rules.Exceptions.InstantiateArgumentExceptionCorrectlyRule
M: System.Void NDesk.Options.Option::AddSeparators(System.String,System.Int32,System.Collections.Generic.ICollection`1<System.String>)
M: System.String NDesk.Options.OptionSet::GetKeyForItem(NDesk.Options.Option)
R: Gendarme.Rules.Serialization.MarkEnumerationsAsSerializableRule
T: NDesk.Options.OptionValueType
R: Gendarme.Rules.Performance.PreferCharOverloadRule
M: System.String NDesk.Options.OptionSet::GetArgumentName(System.Int32,System.Int32,System.String)
R: Gendarme.Rules.Naming.UseCorrectSuffixRule
T: NDesk.Options.OptionSet
R: Gendarme.Rules.Design.Generic.AvoidMethodWithUnusedGenericTypeRule
M: T NDesk.Options.Option::Parse(System.String,NDesk.Options.OptionContext)
R: Gendarme.Rules.Correctness.CheckParametersNullityInVisibleMethodsRule
M: T NDesk.Options.Option::Parse(System.String,NDesk.Options.OptionContext)
M: System.Collections.Generic.List`1<System.String> NDesk.Options.OptionSet::Parse(System.Collections.Generic.IEnumerable`1<System.String>)
M: System.Boolean NDesk.Options.OptionSet::Parse(System.String,NDesk.Options.OptionContext)
R: Gendarme.Rules.Maintainability.AvoidLackOfCohesionOfMethodsRule
T: NDesk.Options.OptionContext
R: Gendarme.Rules.BadPractice.PreferEmptyInstanceOverNullRule
M: System.String NDesk.Options.OptionValueCollection::get_Item(System.Int32)

# The winforms wizard uses Gendarme from a thread so the DecorateThreadsRule will
# fire because Gendarme code, like the rules and the runners, are not marked as
# thread-safe.
R: Gendarme.Rules.Concurrency.DecorateThreadsRule
M: System.Void Gendarme.Wizard::UpdateWelcomeUI()
M: System.Boolean Gendarme.Wizard::UpdateActiveRules()
M: System.Void Gendarme.Wizard::Analyze()

# This is internal code.
R: Gendarme.Rules.Performance.AvoidReturningArraysOnPropertiesRule
M: System.Int32[] Gendarme.Rules.Smells.Pattern::get_Prefixes()

# OK - GetFastCyclomaticComplexity and GetSwitchCyclomaticComplexity are meant to be similar
R: Gendarme.Rules.Smells.AvoidCodeDuplicatedInSameClassRule
T: Gendarme.Rules.Maintainability.AvoidComplexMethodsRule

# OK - some field prefix are identical - but they would be hard to avoid while keeping readability
R: Gendarme.Rules.Smells.AvoidLargeClassesRule
T: Gendarme.Wizard
T: Gendarme.Framework.Helpers.OpCodeBitmask
T: Gendarme.Framework.Runner

# Conditional code is used and, sadly, this leaves useless control flow in the IL
R: Gendarme.Rules.Correctness.ReviewUselessControlFlowRule
M: System.Void Gendarme.Framework.Helpers.Log::WriteLine(T)
M: System.Void Gendarme.Framework.Helpers.Log::WriteLine(T,System.String,System.Object[])
M: System.Void Gendarme.Framework.Helpers.Log::WriteLine(T,Mono.Cecil.MethodDefinition)
M: System.Void Gendarme.Framework.Helpers.Log::WriteLine(System.String)
M: System.Void Gendarme.Framework.Helpers.Log::WriteLine(System.String,System.String,System.Object[])
M: System.Void Gendarme.Framework.Helpers.Log::WriteLine(System.String,Mono.Cecil.MethodDefinition)

# some methods call [Conditional] code where 'this' is used so the compiler can't accept a static method. However the compiled IL could be static
R: Gendarme.Rules.Correctness.MethodCanBeMadeStaticRule
M: System.String Gendarme.Rules.Correctness.AvoidCodeWithSideEffectsInConditionalCodeRule::Mutates(Mono.Cecil.MethodDefinition,Mono.Cecil.Cil.Instruction)
M: System.Boolean Gendarme.Rules.Correctness.AvoidMethodsWithSideEffectsInConditionalCodeRule::IsPure(Mono.Cecil.MethodReference)

R: Gendarme.Rules.Smells.AvoidCodeDuplicatedInSameClassRule
# OK - (CSC only) GetLoadSlot and GetStoreSlot are identical except for the switch/case (load versus store instructions) - delegating calls won't change defect
T: Gendarme.Framework.Helpers.StackEntryAnalysis

# FX4 related - will be fixed once we move to FX4 (likely for Gendarme 3.0)
R: Gendarme.Rules.Maintainability.AvoidUnnecessarySpecializationRule
# use ISet<H>
M: System.Void Gendarme.Rules.Performance.AvoidUninstantiatedInternalClassesRule::AddType(System.Collections.Generic.HashSet`1<Mono.Cecil.TypeReference>,Mono.Cecil.TypeReference)
M: System.Void Gendarme.Rules.Performance.AvoidUncalledPrivateCodeRule::BuildMethodUsage(System.Collections.Generic.HashSet`1<System.UInt32>,Mono.Cecil.MethodDefinition)

