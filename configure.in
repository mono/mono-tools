AC_INIT([mono-tools], [2.8.1])
AC_CONFIG_SRCDIR([README])
AM_INIT_AUTOMAKE([tar-ustar -Wno-portability])
AC_CANONICAL_SYSTEM
AM_MAINTAINER_MODE

AC_PROG_INSTALL

#capture aclocal flags for autoreconf
AC_SUBST(ACLOCAL_FLAGS)

dnl C# compiler
AC_PATH_PROG(MCS, mcs, no)
AC_PATH_PROG(GMCS, gmcs, no)
AC_PATH_PROG(DMCS, dmcs, no)
AC_PATH_PROG(RUNTIME, mono, no)
AC_PATH_PROG(GACUTIL, gacutil, no)

CS="C#"
if test "x$MCS" = "xno"  ; then
	dnl AC_MSG_ERROR([You need to install a C# compiler])
	AC_MSG_ERROR([No $CS compiler found])
fi

AM_CONDITIONAL(DMCS_PRESENT, test ! "x$DMCS" = "xno")

if test "x$RUNTIME" = "xno" ; then
	AC_MSG_ERROR([No runtime found])
fi

dnl resgen
AC_PATH_PROG(RESGEN, resgen, no)
if test "x$RESGEN" = "xno"  ; then
	AC_MSG_ERROR([resgen not found in $PATH])
fi

AC_SUBST(MCS)
AC_SUBST(GMCS)
AC_SUBST(DMCS)
AC_SUBST(RUNTIME)
AC_SUBST(RESGEN)
AC_SUBST(GACUTIL)


PKG_CHECK_MODULES(NUNIT, mono-nunit)
AC_SUBST(NUNIT_LIBS)

PKG_CHECK_MODULES(MONODOC, monodoc)
AC_SUBST(MONODOC_LIBS)
AC_PATH_PROG(MDOC, mdoc, no)
AC_SUBST(MDOC)

PKG_CHECK_MODULES(GTK_SHARP, gtk-sharp-2.0 glade-sharp-2.0)
AC_SUBST(GTK_SHARP_LIBS)

CSHARP_FLAGS=""

PKG_CHECK_MODULES(GNOME_SHARP, gnome-sharp-2.0 gconf-sharp-2.0, enable_gnome=yes, enable_gnome=no)
if test "x$enable_gnome" = "xyes"; then
	CSHARP_FLAGS="-d:GNOME"
fi
AC_SUBST(GNOME_SHARP_LIBS)
AM_CONDITIONAL(ENABLE_GNOME, test "x$enable_gnome" = "xyes")

PKG_CHECK_MODULES(GTKHTML_SHARP, gtkhtml-sharp-3.14, enable_gtkhtml=yes, enable_gtkhtml=no)
if test "x$enable_gtkhtml" = "xyes"; then
	CSHARP_FLAGS="-d:GTKHTML_SHARP_3_14 $CSHARP_FLAGS"
else
	PKG_CHECK_MODULES(GTKHTML_SHARP, gtkhtml-sharp-2.0, enable_gtkhtml=yes, enable_gtkhtml=no)
fi
AC_SUBST(GTKHTML_SHARP_LIBS)
AM_CONDITIONAL(ENABLE_GTKHTML, test "x$enable_gtkhtml" = "xyes")

AC_SUBST(CSHARP_FLAGS)

PKG_CHECK_MODULES(GECKO_SHARP, gecko-sharp-2.0, enable_gecko=yes, enable_gecko=no)
AC_SUBST(GECKO_SHARP_LIBS)
AM_CONDITIONAL(ENABLE_GECKO, test "x$enable_gecko" = "xyes")

if test "x$enable_gecko" = "xyes"; then
   # get the mozilla home directory
   MOZILLA_HOME="`$PKG_CONFIG --variable=libdir mozilla-gtkmozembed`"
   AC_SUBST(MOZILLA_HOME)
fi

PKG_CHECK_MODULES(WEBKIT_SHARP, webkit-sharp-1.0, enable_webkit=yes, enable_webkit=no)
AC_SUBST(WEBKIT_SHARP_LIBS)
AM_CONDITIONAL(ENABLE_WEBKIT, test "x$enable_webkit" = "xyes")

# PKG_CHECK_MODULES(MONOWEBBROWSER, mono-webbrowser, enable_monowebbrowser=yes, enable_monowebbrowser=no)
# AC_SUBST(MONOWEBBROWSER_LIBS)

AC_MSG_CHECKING([for Mono.WebBrowser])
if test "x$GACUTIL" = "xno"
then
   	AC_MSG_RESULT([no])
	if test "x$enable_monowebbrowser" = "x" ; then enable_monowebbrowser=no ; fi
else
	if $GACUTIL -l Mono.WebBrowser | grep -q "Mono.WebBrowser" 
	then
		AC_MSG_RESULT([yes])
		enable_monowebbrowser=yes
	else
		AC_MSG_RESULT([no])
		enable_monowebbrowser=no
	fi  
fi
MONOWEBBROWSER_LIBS=-r:Mono.WebBrowser
AM_CONDITIONAL(ENABLE_MONOWEBBROWSER, test "x$enable_monowebbrowser" = "xyes")

if test "x$enable_gtkhtml$enable_gecko$enable_monowebbrowser$enable_webkit" = "xnononono" ; then
   AC_MSG_ERROR([no HTML display found. You need either gtkhtml, gecko, WebKit or Mono.WebBrowser])
fi

AC_ARG_ENABLE(debug,
	AC_HELP_STRING([--enable-debug],
		[Use 'DEBUG' Configuration [default=YES]]),
		enable_debug=yes, enable_debug=no)
AM_CONDITIONAL(ENABLE_DEBUG, test x$enable_debug = xyes)
if test "x$enable_debug" = "xyes" ; then
	CONFIG_REQUESTED="yes"
fi
AC_ARG_ENABLE(release,
	AC_HELP_STRING([--enable-release],
		[Use 'RELEASE' Configuration [default=NO]]),
		enable_release=yes, enable_release=no)
AM_CONDITIONAL(ENABLE_RELEASE, test x$enable_release = xyes)
if test "x$enable_release" = "xyes" ; then
	CONFIG_REQUESTED="yes"
fi
if test -z "$CONFIG_REQUESTED" ; then
	AM_CONDITIONAL(ENABLE_DEBUG, true)
	enable_debug=yes
fi

if test `uname -s` = "Darwin"; then
        LIB_PREFIX=
        LIB_SUFFIX=.dylib
else
        LIB_PREFIX=.so
        LIB_SUFFIX=
fi
AC_SUBST(LIB_PREFIX)
AC_SUBST(LIB_SUFFIX)

dnl
dnl I hate PKG_CONFIG_MODULES, that is for the weak
dnl
if pkg-config --modversion cecil>/dev/null; then
AC_MSG_RESULT("Found cecil.pc")
else
AC_MSG_ERROR([You are missing Cecil (cecil.pc for packageconfig) required for gui-compare and minvoke])
fi

CECIL_ASM=`pkg-config --variable=Libraries cecil`
AC_SUBST(CECIL_ASM)

dnl Intl
GETTEXT_PACKAGE=mono-tools
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE", [Gettext package])
ALL_LINGUAS="da es fr ca pt_BR"
AM_GLIB_GNU_GETTEXT

GNUNIT_VERSION=0.5
AC_SUBST(GNUNIT_VERSION)

AC_PROG_AWK
export VERSION
[TOOLS_VERSION=$($AWK 'BEGIN {
  split (ENVIRON["VERSION"] ".0.0.0", vsplit, ".")
  if(length(vsplit [1]) > 4) {
    split (substr(ENVIRON["VERSION"], 0, 4) "." substr(ENVIRON["VERSION"], 5) ".0.0", vsplit, ".")
  }
  print vsplit [1] "." vsplit [2] "." vsplit [3] "." vsplit [4]
}')]

AC_SUBST(TOOLS_VERSION)

GENDARME_VERSION=$TOOLS_VERSION
AC_SUBST(GENDARME_VERSION)

AC_OUTPUT([
Makefile
gsharp/Makefile
gsharp/gsharp
gsharp/gsharp.exe.config
gui-compare/Makefile
gui-compare/gui-compare
minvoke/Makefile
minvoke/minvoke
mperfmon/Makefile
mperfmon/mperfmon
docbrowser/Makefile
docbrowser/theme-icons/Makefile
docbrowser/monodoc
docbrowser/AssemblyInfo.cs
po/Makefile.in
asn1view/Makefile
asn1view/art/Makefile
asn1view/gtk/Makefile
asn1view/common/Makefile
ilcontrast/Makefile
ilcontrast/ilcontrast
create-native-map/Makefile
create-native-map/bin/Makefile
create-native-map/lib/Makefile
create-native-map/lib/create-native-map/Makefile
create-native-map/lib/pkgconfig/Makefile
create-native-map/lib/pkgconfig/create-native-map.pc
create-native-map/man/Makefile
create-native-map/src/Makefile
gendarme/Makefile
gendarme/AssemblyInfo.cs
gendarme/gendarme
gendarme/gendarme-wizard
gendarme/gd2i
gendarme/man/Makefile
gendarme/man/gendarme.1
gendarme/man/gendarme.5
gendarme/man/gd2i.1
gendarme/console/Makefile
gendarme/console/gendarme.exe.config
gendarme/framework/Makefile
gendarme/framework/gendarme-framework.pc
gendarme/framework/Test/Makefile
gendarme/rules/Makefile
gendarme/rules/Test.Rules/Makefile
gendarme/rules/Gendarme.Rules.Security/Makefile
gendarme/rules/Gendarme.Rules.Security/Test/Makefile
gendarme/rules/Gendarme.Rules.Security.Cas/Makefile
gendarme/rules/Gendarme.Rules.Security.Cas/Test/Makefile
gendarme/rules/Gendarme.Rules.Performance/Makefile
gendarme/rules/Gendarme.Rules.Performance/Test/Makefile
gendarme/rules/Gendarme.Rules.Concurrency/Makefile
gendarme/rules/Gendarme.Rules.Concurrency/Test/Makefile
gendarme/rules/Gendarme.Rules.Correctness/Makefile
gendarme/rules/Gendarme.Rules.Correctness/Test/Makefile
gendarme/rules/Gendarme.Rules.Portability/Makefile
gendarme/rules/Gendarme.Rules.Portability/Test/Makefile
gendarme/rules/Gendarme.Rules.Exceptions/Makefile
gendarme/rules/Gendarme.Rules.Exceptions/Test/Makefile
gendarme/rules/Gendarme.Rules.Ui/Makefile
gendarme/rules/Gendarme.Rules.Ui/Test/Makefile
gendarme/rules/Gendarme.Rules.Naming/Makefile
gendarme/rules/Gendarme.Rules.Naming/Test/Makefile
gendarme/rules/Gendarme.Rules.Smells/Makefile
gendarme/rules/Gendarme.Rules.Smells/Test/Makefile
gendarme/rules/Gendarme.Rules.BadPractice/Makefile
gendarme/rules/Gendarme.Rules.BadPractice/Test/Makefile
gendarme/rules/Gendarme.Rules.Design/Makefile
gendarme/rules/Gendarme.Rules.Design/Test/Makefile
gendarme/rules/Gendarme.Rules.Design.Generic/Makefile
gendarme/rules/Gendarme.Rules.Design.Generic/Test/Makefile
gendarme/rules/Gendarme.Rules.Design.Linq/Makefile
gendarme/rules/Gendarme.Rules.Design.Linq/Test/Makefile
gendarme/rules/Gendarme.Rules.Interoperability/Makefile
gendarme/rules/Gendarme.Rules.Interoperability/Test/Makefile
gendarme/rules/Gendarme.Rules.Serialization/Makefile
gendarme/rules/Gendarme.Rules.Serialization/Test/Makefile
gendarme/rules/Gendarme.Rules.Maintainability/Makefile
gendarme/rules/Gendarme.Rules.Maintainability/Test/Makefile
gendarme/swf-wizard-runner/Makefile
gendarme/tools/Makefile
gendarme/tools/supported/Makefile
gendarme/tools/supported/gd2i/Makefile
gendarme/tools/unsupported/Makefile
gendarme/tools/unsupported/typeref/Makefile
gendarme/tools/unsupported/xmldoc2wiki/Makefile
gendarme/wix/Makefile
Mono.Profiler/profiler-file-decoder/Makefile
Mono.Profiler/Makefile
Mono.Profiler/heap-snapshot-viewer/mprof-heap-viewer
Mono.Profiler/heap-snapshot-viewer/Makefile
Mono.Profiler/profiler-decoder-library/Makefile
Mono.Profiler/profiler-file-decoder/mprof-decoder
Mono.Profiler/heap-snapshot-explorer/Makefile
Mono.Profiler/Mono.Profiler.Widgets/Makefile
Mono.Profiler/mprof-gui/Makefile
Mono.Profiler/mprof-gui/emveepee
webdoc/Makefile
])

echo "---"
echo "Configuration summary"
echo ""
echo "   * Installation prefix = $prefix"
echo "   * Using Gecko = $enable_gecko"
echo "   * Using GtkHtml = $enable_gtkhtml"
echo "   * Using Mono.WebBrowser = $enable_monowebbrowser"
echo "   * Using WebKit = $enable_webkit"
echo "   * Using Gnome = $enable_gnome"
echo ""
echo "      NOTE: if any of the above say 'no' you may install the"
echo "            corresponding development packages for them, rerun"
echo "            autogen.sh to include them in the build."
echo ""
